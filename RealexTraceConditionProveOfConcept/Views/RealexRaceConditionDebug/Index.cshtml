@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Realex Race Condition Test</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 12px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            padding: 30px;
        }

        h1 {
            color: #333;
            margin-bottom: 10px;
            font-size: 2em;
        }

        .subtitle {
            color: #666;
            margin-bottom: 30px;
            font-size: 1.1em;
        }

        .controls {
            background: #f5f5f5;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
            display: flex;
            gap: 20px;
            align-items: center;
            flex-wrap: wrap;
        }

        .control-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        label {
            font-weight: 600;
            color: #555;
            font-size: 0.9em;
        }

        input[type="number"] {
            padding: 10px;
            border: 2px solid #ddd;
            border-radius: 6px;
            font-size: 1em;
            width: 150px;
            transition: border-color 0.3s;
        }

        input[type="number"]:focus {
            outline: none;
            border-color: #667eea;
        }

        button {
            padding: 12px 30px;
            font-size: 1em;
            font-weight: 600;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.3s;
            align-self: flex-end;
        }

        .btn-start {
            background: #10b981;
            color: white;
        }

        .btn-start:hover:not(:disabled) {
            background: #059669;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(16, 185, 129, 0.4);
        }

        .btn-start:disabled {
            background: #9ca3af;
            cursor: not-allowed;
        }

        .btn-clear {
            background: #ef4444;
            color: white;
        }

        .btn-clear:hover {
            background: #dc2626;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(239, 68, 68, 0.4);
        }

        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

        .stat-card.success {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        }

        .stat-card.error {
            background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        }

        .stat-card.race {
            background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        .stat-label {
            font-size: 0.85em;
            opacity: 0.9;
            margin-bottom: 8px;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .stat-value {
            font-size: 2.5em;
            font-weight: 700;
        }

        .results-container {
            max-height: 600px;
            overflow-y: auto;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
        }

        .result-item {
            padding: 15px;
            border-bottom: 1px solid #e5e7eb;
            transition: background 0.2s;
        }

        .result-item:hover {
            background: #f9fafb;
        }

        .result-item:last-child {
            border-bottom: none;
        }

        .result-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .result-number {
            font-weight: 700;
            color: #667eea;
            font-size: 1.1em;
        }

        .result-status {
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.85em;
            font-weight: 600;
        }

        .status-success {
            background: #d1fae5;
            color: #065f46;
        }

        .status-race {
            background: #fef3c7;
            color: #92400e;
            animation: blink 1s infinite;
        }

        .status-error {
            background: #fee2e2;
            color: #991b1b;
        }

        @@keyframes blink {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.6; }
        }

        .result-details {
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
            color: #4b5563;
            line-height: 1.6;
        }

        .result-details strong {
            color: #1f2937;
        }

        .race-highlight {
            background: #fef3c7;
            padding: 10px;
            border-radius: 6px;
            margin-top: 8px;
            border-left: 4px solid #f59e0b;
        }

        .loading {
            text-align: center;
            padding: 40px;
            color: #667eea;
            font-size: 1.2em;
        }

        .loading::after {
            content: '...';
            animation: dots 1.5s infinite;
        }

        @@keyframes dots {
            0%, 20% { content: '.'; }
            40% { content: '..'; }
            60%, 100% { content: '...'; }
        }

        .progress-bar {
            width: 100%;
            height: 6px;
            background: #e5e7eb;
            border-radius: 3px;
            overflow: hidden;
            margin-bottom: 20px;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #667eea, #764ba2);
            width: 0%;
            transition: width 0.3s;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üî• Realex Race Condition Test</h1>
        <p class="subtitle">Concurrent request testing to detect merchant ID race conditions</p>

        <div class="controls">
            <div class="control-group" style="display:none">
                <label for="testMode">Test Mode:</label>
                <select id="testMode" style="padding: 10px; border: 2px solid #ddd; border-radius: 6px; font-size: 1em; width: 200px;">
                    <option value="standalone">Standalone (Pure Realex SDK)</option>
                    <option value="broker">EPP Broker (Real Code)</option>
                </select>
            </div>
            <div class="control-group">
                <label for="requestCount">Number of Requests:</label>
                <input type="number" id="requestCount" value="20" min="1" max="100"/>
            </div>
            <div class="control-group">
                <label for="delayMs">Delay Between Requests (ms):</label>
                <input type="number" id="delayMs" value="0" min="0" max="1000" step="10"/>
            </div>
            <button class="btn-start" id="startBtn" onclick="startTest()">üöÄ Start Test</button>
            <button class="btn-clear" onclick="clearResults()">üóëÔ∏è Clear Results</button>
        </div>

        <div class="progress-bar" id="progressBar" style="display: none;">
            <div class="progress-fill" id="progressFill"></div>
        </div>

        <div class="stats">
            <div class="stat-card">
                <div class="stat-label">Total Requests</div>
                <div class="stat-value" id="totalRequests">0</div>
            </div>
            <div class="stat-card success">
                <div class="stat-label">‚úÖ Passed</div>
                <div class="stat-value" id="successCount">0</div>
            </div>
            <div class="stat-card race">
                <div class="stat-label">‚ö†Ô∏è Race Conditions</div>
                <div class="stat-value" id="raceCount">0</div>
            </div>
            <div class="stat-card error">
                <div class="stat-label">‚ùå Errors</div>
                <div class="stat-value" id="errorCount">0</div>
            </div>
        </div>

        <div class="results-container" id="resultsContainer">
            <div class="loading" id="loadingMsg" style="display: none;">Running tests</div>
        </div>
    </div>

    <script>
        let results = [];

        async function startTest() {
            const count = parseInt(document.getElementById('requestCount').value);
            const delay = parseInt(document.getElementById('delayMs').value);

            clearResults();
            
            document.getElementById('loadingMsg').style.display = 'block';
            document.getElementById('progressBar').style.display = 'block';
            document.getElementById('progressFill').style.width = '0%';

            // Create all promises with individual handlers
            const promises = [];
            for (let i = 0; i < count; i++) {
                const requestNum = i + 1;
                if (delay > 0) {
                    await sleep(delay);
                }
                
                // Add promise that handles result immediately when it completes
                const promise = makeRequest(requestNum)
                    .then(data => {
                        addResult(requestNum, data);
                    })
                    .catch(error => {
                        addResult(requestNum, {
                            error: true,
                            message: error.message
                        });
                    });
                
                promises.push(promise);
                updateProgress((i + 1) / count * 100);
            }

            // Wait for all requests to complete
            await Promise.allSettled(promises);

            document.getElementById('loadingMsg').style.display = 'none';
            document.getElementById('progressBar').style.display = 'none';

            updateStats();
        }

        async function makeRequest(requestNumber) {
            const testMode = document.getElementById('testMode').value;
            const endpoint = testMode === 'broker' 
                ? '/debug/realex-race-test-broker/api'  // EPP Broker
                : '/debug/realex-race-test/api';        // Standalone

            const response = await fetch(endpoint, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();
            return { ...data, requestNumber };
        }

        function addResult(requestNumber, data) {
            results.push({ requestNumber, data });
            renderResults();
            updateStats(); // Update stats after each result
        }

        function renderResults() {
            const container = document.getElementById('resultsContainer');
            container.innerHTML = '';

            results.forEach(({ requestNumber, data }) => {
                const item = document.createElement('div');
                item.className = 'result-item';

                const isRace = data.raceConditionDetected === true;
                const isError = data.error === true;
                const isSuccess = !isRace && !isError;

                item.innerHTML = `
                    <div class="result-header">
                        <span class="result-number">#${requestNumber}</span>
                        <span class="result-status ${isRace ? 'status-race' : isError ? 'status-error' : 'status-success'}">
                            ${isRace ? '‚ö†Ô∏è RACE CONDITION' : isError ? '‚ùå ERROR' : '‚úÖ PASSED'}
                        </span>
                    </div>
                    <div class="result-details">
                        ${isError ? `
                            <strong>Error:</strong> ${data.message || 'Unknown error'}
                        ` : `
                            <strong>Test Mode:</strong> ${data.testMode || 'STANDALONE'}<br>
                            <strong>Merchant ID (static):</strong><br>
                            &nbsp;&nbsp;Input: ${data.inputMerchantId} | Output: ${data.outputMerchantId} ${data.merchantIdsMatch ? '‚úÖ' : '‚ùå'}<br>
                            <strong>Account ID (random):</strong><br>
                            &nbsp;&nbsp;Input: ${data.inputAccountId} | Output: ${data.outputAccountId} ${data.accountIdsMatch ? '‚úÖ' : '‚ùå'}<br>
                            <strong>Timestamp:</strong> ${new Date(data.testTimestamp).toLocaleTimeString()}<br>
                            ${isRace ? `
                                <div class="race-highlight">
                                    <strong>üî• RACE CONDITION DETECTED!</strong><br>
                                    ${!data.merchantIdsMatch ? 'MerchantId mismatch! ‚ùå<br>' : ''}
                                    ${!data.accountIdsMatch ? 'AccountId mismatch! ‚ùå<br>' : ''}
                                    This proves there's a concurrency bug in the Realex SDK.
                                </div>
                            ` : ''}
                        `}
                    </div>
                `;

                container.appendChild(item);
            });
        }

        function updateStats() {
            const total = results.length;
            const raceConditions = results.filter(r => r.data.raceConditionDetected === true).length;
            const errors = results.filter(r => r.data.error === true).length;
            const success = total - raceConditions - errors;

            document.getElementById('totalRequests').textContent = total;
            document.getElementById('successCount').textContent = success;
            document.getElementById('raceCount').textContent = raceConditions;
            document.getElementById('errorCount').textContent = errors;
        }

        function updateProgress(percent) {
            document.getElementById('progressFill').style.width = percent + '%';
        }

        function clearResults() {
            results = [];
            document.getElementById('resultsContainer').innerHTML = '<div class="loading" id="loadingMsg" style="display: none;">Running tests</div>';
            updateStats();
        }

        function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }
    </script>
</body>
</html>
